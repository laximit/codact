#!/bin/bash

# Variables



WriteName() {
	read -p "Project Name: " $NAME

	CreateProject
}

LanguageOptions() {
	echo "-------------"
	echo "1. Python"
	echo "2. C# Console"
	echo "3. HTML"
	echo "4. Shell"
	echo "5. React (JS)"
	echo "6. React (TSX)"
	echo "7. Java"
	echo "-------------"
	read -p "Language: " $LANGUAGE

	if [ $LANGUAGE -gt 7 ] || [ $LANGUAGE -lt 1 ] ; then
		echo "Please choose a valid number"
	else
		# WriteName
		echo "okay"
	fi
}

Create() {
	


    # Check if chosen project folder exists then enter it
    if [ ! -d $NAME ]; then
        mkdir $NAME
        cd $NAME
    else
        echo "There is already a project with that name, please delete it or use another name."
        exit
    fi

    # Make language-defined project creation
    if [ $1 = 'python' ]; then
        touch module.py
    elif [ $1 = 'c#' ]; then
        dotnet new console
    elif [ $1 = 'html' ]; then
        mkdir html css js assets
        touch html/index.html
        touch css/style.css
        touch js/app.js
    elif [ $1 = 'shell' ]; then
        echo "#!/bin/sh" >>script.sh
    elif [ $1 = 'react' ]; then
        cd ..
        rm -rf $NAME
        npx create-react-app $NAME
        cd $NAME
    elif [ $1 = 'java' ]; then
        mkdir src res
        touch src/main.java
    fi

    # Start Git, add gitignore and README, then make a initial commit
    git init
    touch .gitignore
    touch README.md
    git add *
    git commit -m "Initial Commit"

    # Call Editor function
    Editor
}

Open() {
    # Check if the chosen language directory exists then enter it
    if [ $1 == 'python' ] && [ -d Python ]; then
        cd Python
    elif [ $1 == 'c#' ] && [ -d C# ]; then
        cd C#
    elif [ $1 == 'html' ] && [ -d HTML ]; then
        cd HTML
    elif [ $1 == 'shell' ] && [ -d Shell ]; then
        cd Shell
    elif [ $1 == 'react' ] && [ -d React ]; then
        cd React
    elif [ $1 == 'java' ] && [ -d Java ]; then
        cd Java
    else
        echo "The second argument wasn't a valid Language, for help type 'multicode help'."
        exit
    fi

    # Check if chosen project folder exists then enter it
    if [ -d $NAME ]; then
        cd $NAME
    else
        echo "The third argument wasn't a valid Name, for help type 'multicode help'."
        exit
    fi

    # Call Editor function
    Editor
}

Delete() {
    # Check if the chosen language directory exists then enter it
    if [ $1 == 'python' ] && [ -d Python ]; then
        cd Python
    elif [ $1 == 'c#' ] && [ -d C# ]; then
        cd C#
    elif [ $1 == 'html' ] && [ -d HTML ]; then
        cd HTML
    elif [ $1 == 'shell' ] && [ -d Shell ]; then
        cd Shell
    elif [ $1 == 'react' ] && [ -d React ]; then
        cd React
    elif [ $1 == 'java' ] && [ -d Java ]; then
        cd Java
    else
        echo "The second argument wasn't a valid Language, for help type 'multicode help'."
        exit
    fi

    # Check if the Project exists, ask for a confirmation then delete the project folder
    if [ -d $NAME ]; then
        echo "Are you sure you want to delete $NAME? (y/n)"
        read CONFIRM
        if [ $CONFIRM == 'y' ]; then
            rm -rf $NAME
            echo "Project deleted."
            exit
        elif [ $CONFIRM == 'n' ]; then
            exit
        else
            echo "Please use y/n to confirm."
            exit
        fi
    else
        echo "The third argument wasn't a valid Name, for help type 'multicode help'."
        exit
    fi
}

Help() {
    echo ""
    echo "  ┌─────────────────────────────────────────────────┐"
    echo "  │ Usage (use lower-case)                          │"
    echo "  │ ↳ multicode [action] [language] [name] [editor] │"
    echo "  │ ↳ (Edit) multicode [action] [workspace]         │"
    echo "  │                                                 │"
    echo "  │ Avaliable Actions                               │"
    echo "  │ ↳ create, open, delete, edit, help              │"
    echo "  │                                                 │"
    echo "  │ Avaliable Languages                             │"
    echo "  │ ↳ python, c#, html, shell, react, java          │"
    echo "  │                                                 │"
    echo "  │ Avaliable Editors                               │"
    echo "  │ ↳ vim, neovim, vscode                           │"
    echo "  └─────────────────────────────────────────────────┘"
    echo ""
    exit
}

Edit() {
    cd /bin
    sudo $1 multicode
}

LanguageOptions

# Go to your designed workspace
# cd
# if [ -d $WORKSPACE ]; then
#     cd $WORKSPACE
# else
    # echo "Couldn't find your code workspace, add it using 'Edit' action, for help use 'multicode help'"
# fi

# # Get first action then call his function
# if [ $ACTION = 'create' ]; then
    # Create
# elif [ $ACTION = 'open' ]; then
    # Open
# elif [ $ACTION = 'delete' ]; then
    # Delete
# elif [ $ACTION = 'edit' ]; then
    # Edit
# elif [ $ACTION = 'help' ]; then
    # Help
# else
    # echo "The first argument wasn't a valid Action, for help type 'multicode help'."
    # exit
# fi
